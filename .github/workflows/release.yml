on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - "*" # Push events to matching '*', i.e. 1.0, 20.15.10

name: Upload Release Asset

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "16"

      - run: npm install

      # - name: Run headless test
      #   uses: GabrielBB/xvfb-action@v1.2
      #   with:
      #     run: |
      #       npm test

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
        shell: bash

      # makes ./numeric-v{version}.vsix
      - run: npx vsce package --out ./numeric-${{ steps.get_version.outputs.VERSION }}.vsix

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # This pulls from the create_release and get_version steps above
          # referencing it's ID to get its outputs object, which include a `upload_url`.
          # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./numeric-${{ steps.get_version.outputs.VERSION }}.vsix
          asset_name: numeric-${{ steps.get_version.outputs.VERSION }}.vsix
          asset_content_type: application/vsix

      - name: Publish Extension
        run: |
          npm run publish
        env:
          VSCE_PAT: ${{ secrets.VS_MARKETPLACE }}
